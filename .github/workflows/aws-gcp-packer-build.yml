name: AWS and GCP Packer Build Workflow

on:
  push:
    branches:
      - main

env:
  PRODUCT_VERSION: "1.10.0"

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    env:
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_DIALECT: ${{ secrets.DB_DIALECT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install OS Dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y postgresql postgresql-contrib
          
      - name: Start PostgreSQL Service
        run: sudo service postgresql start

      - name: Create PostgreSQL User & Database
        run: |
          sudo -u postgres psql -c "CREATE ROLE $DB_USER WITH LOGIN CREATEDB PASSWORD '$DB_PASSWORD';"
          sudo -u postgres psql -c "CREATE DATABASE $DB_NAME OWNER $DB_USER;"
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

      - name: Install Node.js Dependencies
        run: npm install

      - name: Run Integration Tests
        run: npm test

  build-ami:
    needs: integration-tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      ami_id: ${{ steps.extract_ami.outputs.ami_id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Zip project artifact
        run: zip -r webapp-fork.zip .
        working-directory: .

      - name: List artifact contents
        run: ls -la webapp-fork.zip

      - name: Configure AWS Credentials for DEV Account
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup packer
        uses: hashicorp/setup-packer@main
        with:
          version: ${{ env.PRODUCT_VERSION }}

      - name: Run packer init
        working-directory: packer
        run: packer init .

      - name: Run packer validate
        working-directory: packer
        run: packer validate .

      - name: Build AMI with Packer
        working-directory: packer
        run: |
          export GOOGLE_APPLICATION_CREDENTIALS=$HOME/gcp-key.json
          packer build --force \
            -var "artifact_path=$(pwd)/../webapp-fork.zip" \
            -var "aws_region=${{ secrets.AWS_REGION }}" \
            -var "aws_subnet_id=${{ secrets.AWS_SUBNET_ID }}" \
            -var "ssh_username=ubuntu" \
            -var "db_password=${{ secrets.DB_PASSWORD }}" \
            -var "db_name=${{ secrets.DB_NAME }}" \
            -var "db_user=${{ secrets.DB_USER }}" \
            -var "db_host=${{ secrets.DB_HOST }}" \
            -var "db_port=${{ secrets.DB_PORT }}" \
            -var "db_dialect=${{ secrets.DB_DIALECT }}" \
            -var "port=${{ secrets.PORT }}" \
            . | tee $HOME/packer_output.log

      - name: Extract AMI ID from Packer Output
        id: extract_ami
        run: |
          AMI_ID=$(grep -oP 'ami-[a-f0-9]+' $HOME/packer_output.log | tail -1)
          if [ -z "$AMI_ID" ]; then
            echo "Error: AMI_ID is empty. Check packer_output.log." >&2
            exit 1
          fi
          echo "Extracted AMI_ID: $AMI_ID"
          # Set the output for this job so deploy can access it
          echo "ami_id=$AMI_ID" >> $GITHUB_OUTPUT

      - name: Share AWS AMI with DEMO AWS Account
        run: |
          aws ec2 modify-image-attribute \
            --image-id ${{ steps.extract_ami.outputs.ami_id }} \
            --launch-permission "Add=[{UserId=${{ secrets.AWS_DEMO_ACCOUNT_ID }} }]" \
            --region ${{ secrets.AWS_REGION }}

  deploy:
    needs: build-ami
    runs-on: ubuntu-latest
    env:
      ASG_NAME: csye6225_asg
      LAUNCH_TEMPLATE_ID: lt-09fcfad07c8c5fe30
      AMI_ID: ${{ needs.build-ami.outputs.ami_id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials for DEMO Account
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_DEMO_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEMO_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create New Launch Template Version
        id: create_lt_version
        run: |
          echo "Creating new launch template version with AMI ${{ env.AMI_ID }}..."
          NEW_LT_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-id $LAUNCH_TEMPLATE_ID \
            --source-version '$Latest' \
            --launch-template-data "{\"ImageId\":\"${{ env.AMI_ID }}\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' --output text)
          echo "New launch template version: $NEW_LT_VERSION"
          echo "lt_version=$NEW_LT_VERSION" >> $GITHUB_OUTPUT

      - name: Update Auto Scaling Group to Use New Launch Template Version
        run: |
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name $ASG_NAME \
            --launch-template "LaunchTemplateId=$LAUNCH_TEMPLATE_ID,Version=${{ steps.create_lt_version.outputs.lt_version }}"

      - name: Start Instance Refresh on ASG
        id: start_instance_refresh
        run: |
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $ASG_NAME \
            --preferences '{"MinHealthyPercentage":90,"InstanceWarmup":60}' \
            --query 'InstanceRefreshId' --output text)
          echo "Instance refresh initiated with ID: $REFRESH_ID"
          echo "refresh_id=$REFRESH_ID" >> $GITHUB_OUTPUT

      - name: Wait for Instance Refresh to Complete
        run: |
          REFRESH_ID=${{ steps.start_instance_refresh.outputs.refresh_id }}
          echo "Waiting for instance refresh with ID: $REFRESH_ID to complete..."
          STATUS=$(aws autoscaling describe-instance-refreshes \
            --auto-scaling-group-name $ASG_NAME \
            --query "InstanceRefreshes[?InstanceRefreshId=='$REFRESH_ID'].Status" --output text)
          echo "Initial refresh status: $STATUS"
          # Poll until the status is either "Successful" or "Failed"
          while [[ "$STATUS" != "Successful" && "$STATUS" != "Failed" ]]; do
            sleep 30
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name $ASG_NAME \
              --query "InstanceRefreshes[?InstanceRefreshId=='$REFRESH_ID'].Status" --output text)
            echo "Current refresh status: $STATUS"
          done
          echo "Final instance refresh status: $STATUS"
          if [ "$STATUS" != "Successful" ]; then
            echo "Instance refresh failed!"
            exit 1
          fi

      - name: Deployment Complete
        run: echo "Instance refresh complete and successful."
