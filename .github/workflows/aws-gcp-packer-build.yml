name: AWS and GCP Packer Build Workflow

on:
  push:
    branches:
      - main

env:
  PRODUCT_VERSION: "1.10.0"

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    env:
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_DIALECT: ${{ secrets.DB_DIALECT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install OS Dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y postgresql postgresql-contrib
          
      - name: Start PostgreSQL Service
        run: sudo service postgresql start

      - name: Create PostgreSQL User & Database
        run: |
          sudo -u postgres psql -c "CREATE ROLE $DB_USER WITH LOGIN CREATEDB PASSWORD '$DB_PASSWORD';"
          sudo -u postgres psql -c "CREATE DATABASE $DB_NAME OWNER $DB_USER;"
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

      - name: Install Node.js Dependencies
        run: npm install

      - name: Run Integration Tests
        run: npm test

  build-ami:
    needs: integration-tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Zip project artifact
        run: zip -r webapp-fork.zip .
        working-directory: .

      - name: List artifact contents
        run: ls -la webapp-fork.zip

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          install_components: 'beta,gsutil'

      - name: Save Google Cloud Credentials to File
        run: |
          echo '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}' > $HOME/gcp-key.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$HOME/gcp-key.json" >> $GITHUB_ENV
        shell: bash

      - name: Setup packer
        uses: hashicorp/setup-packer@main
        with:
          version: ${{ env.PRODUCT_VERSION }}

      - name: Run packer init
        working-directory: packer
        run: packer init .

      - name: Run packer validate
        working-directory: packer
        run: packer validate .

      - name: Build AMI with Packer
        working-directory: packer
        run: |
          export GOOGLE_APPLICATION_CREDENTIALS=$HOME/gcp-key.json
          packer build --force \
            -var "artifact_path=$(pwd)/../webapp-fork.zip" \
            -var "aws_region=${{ secrets.AWS_REGION }}" \
            -var "aws_subnet_id=${{ secrets.AWS_SUBNET_ID }}" \
            -var "ssh_username=ubuntu" \
            -var "db_password=${{ secrets.DB_PASSWORD }}" \
            -var "db_name=${{ secrets.DB_NAME }}" \
            -var "db_user=${{ secrets.DB_USER }}" \
            -var "db_host=${{ secrets.DB_HOST }}" \
            -var "db_port=${{ secrets.DB_PORT }}" \
            -var "db_dialect=${{ secrets.DB_DIALECT }}" \
            -var "port=${{ secrets.PORT }}" \
            -var "gcp_project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var "gcp_zone=${{ secrets.GCP_ZONE }}" \
            . | tee $HOME/packer_output.log

      - name: Extract AMI ID and GCP Image Name
        id: extract_packer_outputs
        run: |
          AMI_ID=$(grep -oP 'ami-[a-f0-9]+' $HOME/packer_output.log | tail -1)
          GCP_IMAGE_NAME=$(grep -oP "A disk image was created in .*: \K(.*)" $HOME/packer_output.log | tail -1)
          
          echo "ami-id=$AMI_ID" >> $GITHUB_ENV
          echo "gcp-image=$GCP_IMAGE_NAME" >> $GITHUB_ENV
      
      # - name: Share GCP Image with Another Project
      #   run: |
      #     gcloud compute images add-iam-policy-binding ${{ env.gcp-image }} \
      #       --project=${{ secrets.GCP_PROJECT_ID }} \
      #       --member=serviceAccount:${{ secrets.GCP_DEMO_PROJECT_NUMBER }}@cloudservices.gserviceaccount.com \
      #       --role=roles/compute.imageUser
          
      - name: Share AWS AMI with Another AWS Account
        run: |
          aws ec2 modify-image-attribute \
            --image-id ${{ env.ami-id }} \
            --launch-permission "Add=[{UserId=${{ secrets.AWS_DEMO_ACCOUNT_ID }} }]" \
            --region ${{ secrets.AWS_REGION }}
