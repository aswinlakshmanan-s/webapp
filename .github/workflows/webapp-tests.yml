name: Continuous Integration

on:
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install PostgreSQL
        run: |
          sudo apt update
          sudo apt install -y postgresql postgresql-contrib
          sudo systemctl start postgresql
          sudo systemctl enable postgresql
          psql --version

      - name: Configure PostgreSQL
        env:
          DB_NAME: ${{ vars.DB_NAME }}
          DB_USER: ${{ vars.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          echo "Configuring PostgreSQL with DB_NAME=${DB_NAME} and DB_USER=${DB_USER}..."

          # Ensure variables are set
          if [[ -z "$DB_NAME" || -z "$DB_USER" || -z "$DB_PASSWORD" ]]; then
            echo "ERROR: Missing database variables! Check repository variables."
            exit 1
          fi

          # Drop user-owned objects before dropping user
          sudo -u postgres psql -c "REASSIGN OWNED BY $DB_USER TO postgres;" || true
          sudo -u postgres psql -c "DROP OWNED BY $DB_USER;" || true
          sudo -u postgres psql -c "DROP DATABASE IF EXISTS $DB_NAME;"
          sudo -u postgres psql -c "DROP USER IF EXISTS $DB_USER;"
          sudo -u postgres psql -c "CREATE DATABASE $DB_NAME;"
          sudo -u postgres psql -c "CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;"

          echo "✅ PostgreSQL successfully configured!"

      - name: Wait for PostgreSQL to Be Ready
        env:
          DB_HOST: ${{ vars.DB_HOST }}
          DB_PORT: ${{ vars.DB_PORT }}
          DB_USER: ${{ vars.DB_USER }}
        run: |
          DB_PORT=${DB_PORT:-5432}  # Set default port if not provided
          echo "Waiting for PostgreSQL to be ready on ${DB_HOST}:${DB_PORT}..."

          export PGUSER=$DB_USER  # Use environment variable instead of -U
          until pg_isready -h "$DB_HOST" -p "$DB_PORT"; do
            echo "⏳ PostgreSQL not ready yet..."
            sleep 2
          done

          echo "✅ PostgreSQL is ready!"

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        env:
          DB_HOST: ${{ vars.DB_HOST }}
          DB_NAME: ${{ vars.DB_NAME }}
          DB_PORT: ${{ vars.DB_PORT }}
          DB_USER: ${{ vars.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          PORT: ${{ vars.PORT }}
          DATABASE_URL: postgres://${{ vars.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ vars.DB_HOST }}:${{ vars.DB_PORT }}/${{ vars.DB_NAME }}
        run: npm test
